/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
// const cors = require('cors');
let port = 3000;

const app = express();
let todo = [];
app.use(bodyParser.json());
// app.use(cors());

app.get('/todos',(req,res) =>{
    res.status('200').json(todo);
});
app.post('/todos',(req,res)=>{
  let obj = {
    id:Math.floor(Math.random()*1000000),
    task: req.body.task,
    completed: req.body.completed,
    description: req.body.description
  }
  todo.push(obj);
  let answer = {
    id:obj.id
  }
  res.status('200').send(answer);

});
// app.get('/todos/:id',(req,res)=>{
//   let i = findIndex(todo,parseInt(req.params.id));
//   if(i == -1) res.status('404').send("Not Found");
//   else res.status('200').send(todo[i].task);
// });
// app.put('/todos/:id',(req,res)=>{
//   let i = findIndex(todo,parseInt(req.params.id));
//   if(i == -1) res.status('404').send("Not Found");
//   else{
//     todo[i].task = req.body.task;
//     todo[i].completed = req.body.completed;
//     todo[i].description = req.body.description;
//     res.status('200');
//   }
// });
app.delete('/todos/:id',(req,res)=>{
  let i = findIndex(todo,parseInt(req.params.id));
  if(i == -1) res.status('404').send("Not Found");
  else{
    remove(todo,i);
    res.status('200').send("Deleted Succesfully");
  }
  
});


function findIndex(array,id){
  for(let i = 0;i <array.length;i ++){
    if(array[i].id === id) return i;
  }
  return -1;
}
function remove(array,index){
  let obj = [];
  for(let i = 0; i<array.length; i++){
    if(i!=index) obj.push(array[i]);
  }
  todo = obj;
}

// app.get("/",(req,res)=>{
//   res.sendFile(path.join(__dirname,"todo.html"));
// })
app.listen(port,()=>{
  console.log(`app example listening on port ${port}`);
});
//module.exports = app;
